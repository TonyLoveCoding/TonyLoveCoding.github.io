{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"Lombok入门教程","slug":"lombok","date":"2019-08-12T15:08:26.000Z","updated":"2019-08-12T18:48:06.075Z","comments":true,"path":"2019/08/12/lombok/","link":"","permalink":"http://yoursite.com/2019/08/12/lombok/","excerpt":"","text":"0、Lombok是什么Lombok项目是一个自动继承到代码编辑器以及编译工具的Java类库，让你的Java项目更有意思。通过添加注解，我们就不用再编写get/setter方法、equals方法、toString方法，甚至流式编程的builder模式也能自动生成，以及自动生成日志变量log等等。 1、安装使用以IntelliJ IDEA为例： 点击”File” -&gt; “Settings” -&gt; “Plugins”； 点击”Browse repositories”； 搜索”Lombok Plugin”； 点击”Install plugin”； 重启你的IDEA； 其他IDE安装方法请参考官方文档。 2、常用注解 @Data 注解在类上，为类起到了@ToString, @EqualsAndHashCode, 对所有变量的@Getter , 对非final变量的@Setter , and @RequiredArgsConstructor注解的作用。 @Builder 提供了以Builder模式生成一个对应对象的作用。 @Log4j 注解在类上, 为类提供一个属性名为 log 的 Log4j的日志对象。 @Slf4j 注解在类上, 为类提供一个属性名为 log 的 Slf4j的日志对象。 @ToString 为类提供toString方法，默认为全部参数。 @EqualsAndHashCode 为类提供Equals，默认为全部参数进行比较，可以在变量标识`@EqualsAndHashCode.Exclude`来排除变量比较； 为类提供HashCode的实现，可以指定boolean字段callSuper为true以调用父类的HashCode方法。 @NoArgsConstructor 为类提供无参的构造方法。 @RequiredArgsConstructor 为类提供包含final变量、标识了@NonNull注解的构造方法。 可以为该注解指定String字段staticName，将生成以staticName为方法名的构造方法。 @AllArgsConstructor 为类提供全参的构造方法。 @NonNull 注解在参数上, 如果该类参数为 null , 就会报出异常, throw new NullPointException(参数名)。 @Getter(lazy=true) 注解在参数上，以单例模式的双重校验饿汉式获取某一个对象，适合用于创建耗时较长的对象变量，使用AtomicReference来做缓存。 3、代码示例3.1、使用@Data注解12345678910111213@Data public class DataExample &#123; private final String name; @Setter(AccessLevel.PACKAGE) private int age; private double score; private String[] tags; @ToString(includeFieldNames=true) @Data(staticConstructor=\"of\") public static class Exercise&lt;T&gt; &#123; private final String name; private final T value; &#125;&#125; Java对比： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117public class DataExample &#123; private final String name; private int age; private double score; private String[] tags; public DataExample(String name) &#123; this.name = name; &#125; public String getName() &#123; return this.name; &#125; void setAge(int age) &#123; this.age = age; &#125; public int getAge() &#123; return this.age; &#125; public void setScore(double score) &#123; this.score = score; &#125; public double getScore() &#123; return this.score; &#125; public String[] getTags() &#123; return this.tags; &#125; public void setTags(String[] tags) &#123; this.tags = tags; &#125; @Override public String toString() &#123; return \"DataExample(\" + this.getName() + \", \" + this.getAge() + \", \" + this.getScore() + \", \" + Arrays.deepToString(this.getTags()) + \")\"; &#125; protected boolean canEqual(Object other) &#123; return other instanceof DataExample; &#125; @Override public boolean equals(Object o) &#123; if (o == this) return true; if (!(o instanceof DataExample)) return false; DataExample other = (DataExample) o; if (!other.canEqual((Object)this)) return false; if (this.getName() == null ? other.getName() != null : !this.getName().equals(other.getName())) return false; if (this.getAge() != other.getAge()) return false; if (Double.compare(this.getScore(), other.getScore()) != 0) return false; if (!Arrays.deepEquals(this.getTags(), other.getTags())) return false; return true; &#125; @Override public int hashCode() &#123; final int PRIME = 59; int result = 1; final long temp1 = Double.doubleToLongBits(this.getScore()); result = (result*PRIME) + (this.getName() == null ? 43 : this.getName().hashCode()); result = (result*PRIME) + this.getAge(); result = (result*PRIME) + (int)(temp1 ^ (temp1 &gt;&gt;&gt; 32)); result = (result*PRIME) + Arrays.deepHashCode(this.getTags()); return result; &#125; public static class Exercise&lt;T&gt; &#123; private final String name; private final T value; private Exercise(String name, T value) &#123; this.name = name; this.value = value; &#125; public static &lt;T&gt; Exercise&lt;T&gt; of(String name, T value) &#123; return new Exercise&lt;T&gt;(name, value); &#125; public String getName() &#123; return this.name; &#125; public T getValue() &#123; return this.value; &#125; @Override public String toString() &#123; return \"Exercise(name=\" + this.getName() + \", value=\" + this.getValue() + \")\"; &#125; protected boolean canEqual(Object other) &#123; return other instanceof Exercise; &#125; @Override public boolean equals(Object o) &#123; if (o == this) return true; if (!(o instanceof Exercise)) return false; Exercise&lt;?&gt; other = (Exercise&lt;?&gt;) o; if (!other.canEqual((Object)this)) return false; if (this.getName() == null ? other.getValue() != null : !this.getName().equals(other.getName())) return false; if (this.getValue() == null ? other.getValue() != null : !this.getValue().equals(other.getValue())) return false; return true; &#125; @Override public int hashCode() &#123; final int PRIME = 59; int result = 1; result = (result*PRIME) + (this.getName() == null ? 43 : this.getName().hashCode()); result = (result*PRIME) + (this.getValue() == null ? 43 : this.getValue().hashCode()); return result; &#125; &#125;&#125; 3.2、 使用@Getter(lazy=true)注解1234567891011public class GetterLazyExample &#123; @Getter(lazy=true) private final double[] cached = expensive(); private double[] expensive() &#123; double[] result = new double[1000000]; for (int i = 0; i &lt; result.length; i++) &#123; result[i] = Math.asin(i); &#125; return result; &#125;&#125; Java对比： 1234567891011121314151617181920212223242526public class GetterLazyExample &#123; private final java.util.concurrent.AtomicReference&lt;java.lang.Object&gt; cached = new java.util.concurrent.AtomicReference&lt;java.lang.Object&gt;(); public double[] getCached() &#123; java.lang.Object value = this.cached.get(); if (value == null) &#123; synchronized(this.cached) &#123; value = this.cached.get(); if (value == null) &#123; final double[] actualValue = expensive(); value = actualValue == null ? this.cached : actualValue; this.cached.set(value); &#125; &#125; &#125; return (double[])(value == this.cached ? null : value); &#125; private double[] expensive() &#123; double[] result = new double[1000000]; for (int i = 0; i &lt; result.length; i++) &#123; result[i] = Math.asin(i); &#125; return result; &#125;&#125; 3.3、 使用@Builder注解1234567@Builderpublic class BuilderExample &#123; @Builder.Default private long created = System.currentTimeMillis(); private String name; private int age; @Singular private Set&lt;String&gt; occupations;&#125; Java对比： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384public class BuilderExample &#123; private long created; private String name; private int age; private Set&lt;String&gt; occupations; BuilderExample(String name, int age, Set&lt;String&gt; occupations) &#123; this.name = name; this.age = age; this.occupations = occupations; &#125; private static long $default$created() &#123; return System.currentTimeMillis(); &#125; public static BuilderExampleBuilder builder() &#123; return new BuilderExampleBuilder(); &#125; public static class BuilderExampleBuilder &#123; private long created; private boolean created$set; private String name; private int age; private java.util.ArrayList&lt;String&gt; occupations; BuilderExampleBuilder() &#123; &#125; public BuilderExampleBuilder created(long created) &#123; this.created = created; this.created$set = true; return this; &#125; public BuilderExampleBuilder name(String name) &#123; this.name = name; return this; &#125; public BuilderExampleBuilder age(int age) &#123; this.age = age; return this; &#125; public BuilderExampleBuilder occupation(String occupation) &#123; if (this.occupations == null) &#123; this.occupations = new java.util.ArrayList&lt;String&gt;(); &#125; this.occupations.add(occupation); return this; &#125; public BuilderExampleBuilder occupations(Collection&lt;? extends String&gt; occupations) &#123; if (this.occupations == null) &#123; this.occupations = new java.util.ArrayList&lt;String&gt;(); &#125; this.occupations.addAll(occupations); return this; &#125; public BuilderExampleBuilder clearOccupations() &#123; if (this.occupations != null) &#123; this.occupations.clear(); &#125; return this; &#125; public BuilderExample build() &#123; // complicated switch statement to produce a compact properly sized immutable set omitted. Set&lt;String&gt; occupations = ...; return new BuilderExample(created$set ? created : BuilderExample.$default$created(), name, age, occupations); &#125; @java.lang.Override public String toString() &#123; return \"BuilderExample.BuilderExampleBuilder(created = \" + this.created + \", name = \" + this.name + \", age = \" + this.age + \", occupations = \" + this.occupations + \")\"; &#125; &#125;&#125; 使用方法： 1BuilderExample example = BuilderExample.builder().name(name).age(age).occupations.(occupations).build（）； 4、使用lombok遇到的问题​ 目前我发现无法对Lombok的注解进行注解结合，如下代码将报错： 123456@Target(&#123;ElementType.TYPE&#125;)@Retention(RetentionPolicy.SOURCE)@Data //Lombok注解public @interface MyPOJO&#123;&#125; ​ 希望知道原因的同学可以在评论区交流一下。 5、参考来源 Lombok官方文档 Lombok@Builder注解","categories":[{"name":"教程","slug":"教程","permalink":"http://yoursite.com/categories/教程/"}],"tags":[{"name":"Lombok","slug":"Lombok","permalink":"http://yoursite.com/tags/Lombok/"},{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"Hexo系列（二）使用Markdown写hexo博文","slug":"hexo-Markdown-grammar","date":"2019-08-09T13:30:56.000Z","updated":"2019-08-09T14:41:32.816Z","comments":true,"path":"2019/08/09/hexo-Markdown-grammar/","link":"","permalink":"http://yoursite.com/2019/08/09/hexo-Markdown-grammar/","excerpt":"","text":"0、Markdown是什么Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。也就是说当你熟练了之后就能不靠鼠标为博文设置行文格式，并且Markdown在许多博客得到支持，即“一次编写，到处展示”。 Markdown语法编辑器推荐使用Typora（即时展示效果，包括图片和流程图）、MarkdownPad2（分屏展示工作区和预览区）； 以下是Markdown常用的语法，更多细节可以看Markdown官方文档。 1、标题# 一级标题 （请注意，末尾的#后面都有空格） ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 效果如下： 2、字体样式**加粗** *倾斜* ***斜体加粗*** ~~删除线~~ 示例： 加粗 倾斜 斜体加粗 删除线 3、引用&gt;一级引用 &gt;&gt;二级引用 &gt;&gt;&gt;三级引用 示例： 一级引用 二级引用 三级引用 4、分割线--- ---- *** ***** 示例：（效果都一样） 5、图片![图片文字]（图片地址 &quot;图片标题&quot;) 图片标题是可选的，用双引号包括。 示例： 6、超链接[超链接名字]（超链接地址 &quot;超链接title&quot;) &lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt; Tony个人博客 百度 7、列表同级无序列表： - 无序列表 + 无序列表 * 无序列表 无序列表 无序列表 无序列表 同级有序列表： 1. 有序列表 2. 有序列表 3. 有序列表 有序列表 有序列表 有序列表 多级无序列表： - 一级无序列表 + 二级无序列表 - 二级无序列表 * 二级无序列表 + 三级无序列表 - 一级无序列表 * 二级无序列表 一级无序列表 二级无序列表 二级无序列表 二级无序列表 三级无序列表 一级无序列表 二级无序列表 多级有序无序列表： 1. 一级有序列表 + 二级无序列表 - 二级无序列表 * 二级无序列表 2. 一级有序列表 1. 二级有序列表 2. 二级有序列表 3. 三级有序列表 一级有序列表 二级无序列表 二级无序列表 二级无序列表 一级有序列表 二级有序列表 二级有序列表 三级有序列表 8、表格表头|表头|表头 ---|:--:|---: 内容|内容|内容 内容|内容|内容 第二行分割表头和内容。 - 有一个就行，为了对齐，多加了几个 文字默认居左 -两边加：表示文字居中 -右边加：表示文字居右 注：原生的语法两边都要用 | 包起来。此处省略 示例： 表头 表头 表头 内容 内容 内容 内容 内容 内容 9、代码`代码内容` 代码内容 代码内容（一个缩进，或者四个空格） 示例：（第二种格式需要加括号防止转义，使用时去掉括号,这个符号是Esc键下面的键） 代码内容 代码内容 代码内容 12代码内容代码内容 10、引用&gt;引用文字 示例： 引用文字 11、流程图1234567st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op hexo默认不支持流程图，需要执行命令： 1npm install --save hexo-filter-flowchart 示例: 1234567st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 以上就是Markdown常用语法，多熟悉语法才能体会到它的便捷。 本文参考 Markdown基本语法 Markdown中文文档","categories":[{"name":"教程","slug":"教程","permalink":"http://yoursite.com/categories/教程/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"利用tesseract训练数据集来识别图片文本","slug":"tesseract","date":"2018-04-02T14:08:49.000Z","updated":"2019-08-08T17:32:53.547Z","comments":true,"path":"2018/04/02/tesseract/","link":"","permalink":"http://yoursite.com/2018/04/02/tesseract/","excerpt":"","text":"由于最近项目需要识别图片文字，我就去了解了Tesseract-OCR这个由Google维护的开源OCR引擎和其对应的Java接口Tess4j（Tesseract for java）。缓更。","categories":[{"name":"学习记录","slug":"学习记录","permalink":"http://yoursite.com/categories/学习记录/"}],"tags":[{"name":"tesseract","slug":"tesseract","permalink":"http://yoursite.com/tags/tesseract/"}]},{"title":"Hexo系列（一）搭建Hexo博客","slug":"hexo-1","date":"2018-04-02T12:50:55.000Z","updated":"2019-08-12T18:32:54.283Z","comments":true,"path":"2018/04/02/hexo-1/","link":"","permalink":"http://yoursite.com/2018/04/02/hexo-1/","excerpt":"","text":"Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 附上官方中文文档：Hexo官方文档 基本环境建立一个基于Hexo博客框架需要有以下环境（没有的话自行查看官方文档的安装教程）: Git Node.js GitHub帐号 安装Hexo在你喜欢的目录文件夹下，右键后菜单中有个”Git Bash Here”选项，点击打开终端输入以下命令 $ npm install -g hexo 等安装后，输入 $ hexo init 安装依赖包： $ npm install 现在可以输入hexo的常用命令来看看hexo初步模样 $ hexo g //generate 生成静态文件的命令 $ hexo s //server 启动并运行在本地服务器的命令 然后访问localhost:4000就成功看到Hexo了。但现在这个博客只是在你的本地上运行，要想部署在网络上需要用到GitHub。 部署Hexo到Github上——配置文件在Github中创建一个仓库（即项目） （注意：仓库名字必须是你的Github账户名字.github.io） 然后用Notopad++（一个很强大很强大很强大的文本编辑软件）打开hexo根目录下的_config.yml文件（最好先备份一个）拉到文件最下面，找到deploy节点，配置你hexo博客部署的网站。 deploy: type: git repo: github: git@github.com:TonyLoveCoding/TonyLoveCoding.github.io.git,master 请注意以下几点： 配置时把这段代码的TonyLoveCoding换成你自己的Github账号名称。 Hexo的配置文件中所有冒号后面必须紧跟着一个空格。 对于新版本的Hexo而言，配置文件中每行的缩进是区别节点等级的标识，不要随意输入tab符号。比如depoly前面的-号就代表它有两个子节点type和repo，repo又有子节点github等等。 部署Hexo到Github上——配置SSHGitBash输入指令： ls -al ~/.ssh 如果你是Github老用户应该会存在SSH文件，如果没有就继续 ssh-keygen -t rsa -C &quot;765534395@qq.com&quot; 记得换成你Github的绑定邮箱，遇到输入时直接回车就行。然后以下命令： ssh-agent -s ssh-add ~/.ssh/id_rsa 如果出错，试试 eval `ssh-agent -s` ssh-add 成功了后，在C:/Users/你的用户名称/.ssh目录下就应该能看到id_rsa.pub了用Notepad++打开并复制里面全部内容。到GitHub中Setting中进行如下操作：这样就完成了配置SSH，接着测试一下SSH ssh -T git@github.com 有输入的话就yes。现在让我们开始部署到GitHub上。先安装hexo-deployer-git模块 npm install hexo-deployer-git --save 然后开始部署： hexo g //generate 生成静态文件 hexo d //deploy 部署到配置文件中指定的地点 现在就可以访问你的博客了，地址是：你的GitHub名称.github.io 发布文章hexo new &quot;test_new_artcle&quot; 然后在\\hexo\\source_posts下就有了test_new_artcle.md文件了。由于Hexo推荐Markdown来写文章，我们最好下载Markdownpad来方便编写文章。左边是我们的markdown编写区，右边则是实时的效果展示区。关于markdown的语法我以后有空再写篇文章介绍下。编写你的文章后，还是老命令： hexo g //编译生成文件 hexo s //本地预览 hexo d //同步文件到Github 就这样，你已经能完成在你的博客上写文章让其他人来观看了。 其他如果你看腻了Hexo的默认主题，可以去官方的主题网页中寻找你喜欢的主题，然后学习如何改进UI和样式效果，就能打造真正意义上的独立博客了。 当然，hexo并不止这些内容，记得多去官方文档看看，有很多特性等你去发掘。","categories":[{"name":"教程","slug":"教程","permalink":"http://yoursite.com/categories/教程/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]},{"title":"关于本站","slug":"blog-desciption","date":"2018-04-02T12:22:56.000Z","updated":"2019-08-08T17:32:53.537Z","comments":true,"path":"2018/04/02/blog-desciption/","link":"","permalink":"http://yoursite.com/2018/04/02/blog-desciption/","excerpt":"","text":"这个博客是用来记录我在学习过程中的经验收获和错误总结，为了方便自己以后查询也方便其他访客学习交流。尽量做到每周一两更吧。 建立博客的初衷以后学习的时候一直没有总结的习惯，也曾想过用CSDN、博客园等等来写博文，但感觉广告太多加上个人太懒的原因便不了了之，所以一直以来的资料都是直接收藏在浏览器中。一个偶然的机会看到嘟嘟独立博客后就萌发着手建立Hexo博客的想法，便开始搭建本博客，很感谢这位博主的教程。 博客进展1）（已完成）Hexo搭建 2）（已完成）使用并优化Jacman主题 3）（进行中）让博客录入到百度和谷歌搜索引擎 4）（已完成）利用swiftype添加博客站内引擎 5）（已完成）加入访客统计工具CSZZ 6）（已完成）实现国内部署在Coding, 国外部署在GitHub 7）（已完成）为博客弄一个简单明了的域名（tonyao = Tony Yao） 8) （进行中）添加第三方插件作为博客的评论系统（畅言或Gitalk） 9) 其他…… 博客展望暂时没什么想法，尽量保证博文的质量吧，有空倒腾一下公众号什么的。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/categories/随笔/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"}]}]}