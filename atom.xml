<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tony个人博客</title>
  
  <subtitle>莫辜负光阴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tonyao.top/"/>
  <updated>2019-08-12T15:10:09.015Z</updated>
  <id>http://tonyao.top/</id>
  
  <author>
    <name>Tony Yao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Lombok入门教程</title>
    <link href="http://tonyao.top/2019/08/12/lombok/"/>
    <id>http://tonyao.top/2019/08/12/lombok/</id>
    <published>2019-08-12T15:08:26.000Z</published>
    <updated>2019-08-12T15:10:09.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0、Lombok是什么"><a href="#0、Lombok是什么" class="headerlink" title="0、Lombok是什么"></a>0、Lombok是什么</h2><p><strong><em>Lombok</em></strong>项目是一个自动继承到代码编辑器以及编译工具的Java类库，让你的Java项目更有意思。通过添加注解，我们就不用再编写<strong>get/setter</strong>方法、<strong>equals</strong>方法、<strong>toString</strong>方法，甚至流式编程的<strong>builder模式</strong>也能自动生成，以及自动生成<strong>日志变量log</strong>等等。</p><h2 id="1、安装使用"><a href="#1、安装使用" class="headerlink" title="1、安装使用"></a>1、安装使用</h2><p>以IntelliJ IDEA为例：</p><ol><li>点击”File” -&gt; “Settings” -&gt; “Plugins”；</li><li>点击”Browse repositories”；</li><li>搜索”Lombok Plugin”；</li><li>点击”Install plugin”；</li><li>重启你的IDEA；</li></ol><p>其他IDE安装方法请参考<a href="https://projectlombok.org/&quot;Lombok官方文档&quot;" target="_blank" rel="noopener">官方文档</a>。</p><h2 id="2、常用注解"><a href="#2、常用注解" class="headerlink" title="2、常用注解"></a>2、常用注解</h2><ul><li><p><strong>@Data</strong></p><p>注解在类上，为类起到了<code>@ToString</code>, <code>@EqualsAndHashCode</code>, 对所有变量的<code>@Getter</code> , 对非final变量的<code>@Setter</code> , and <code>@RequiredArgsConstructor</code>注解的作用。</p></li><li><p><strong>@Builder</strong></p><p>提供了以Builder模式生成一个对应对象的作用。</p></li><li><p><strong>@Log4j</strong></p><p>注解在类上, 为类提供一个属性名为 log 的 Log4j的日志对象。</p></li><li><p><strong>@Slf4j</strong></p><p>注解在类上, 为类提供一个属性名为 log 的 Slf4j的日志对象。</p></li><li><p><strong>@ToString</strong></p><p>为类提供toString方法，默认为全部参数。</p><p><strong>@EqualsAndHashCode</strong></p><p>为类提供Equals，默认为全部参数进行比较，可以在变量标识<code>@EqualsAndHashCode.Exclude</code>来排除变量比较；</p><p>为类提供HashCode的实现，可以指定boolean字段callSuper为true以调用父类的HashCode方法。</p></li><li><p><strong>@NoArgsConstructor</strong></p><p>为类提供无参的构造方法。</p></li><li><p><strong>@RequiredArgsConstructor</strong></p><p>为类提供包含final变量、标识了<code>@NonNull</code>注解的构造方法。</p><p>可以为该注解指定String字段staticName，将生成以staticName为方法名的构造方法。</p></li><li><p><strong>@AllArgsConstructor</strong></p><p>为类提供全参的构造方法。</p></li><li><p><strong>@NonNull</strong></p><p>注解在参数上, 如果该类参数为 null , 就会报出异常,  throw new NullPointException(参数名)。</p></li><li><p><strong>@Getter(lazy=true)</strong></p><p>注解在参数上，以单例模式的双重校验饿汉式获取某一个对象，适合用于创建耗时较长的对象变量，使用AtomicReference来做缓存。</p></li></ul><h2 id="3、代码示例"><a href="#3、代码示例" class="headerlink" title="3、代码示例"></a>3、代码示例</h2><h3 id="3-1、使用-Data注解"><a href="#3-1、使用-Data注解" class="headerlink" title="3.1、使用@Data注解"></a>3.1、使用<code>@Data</code>注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">  <span class="meta">@Setter</span>(AccessLevel.PACKAGE) <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">  <span class="keyword">private</span> String[] tags;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@ToString</span>(includeFieldNames=<span class="keyword">true</span>)</span><br><span class="line">  <span class="meta">@Data</span>(staticConstructor=<span class="string">"of"</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java对比：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">  <span class="keyword">private</span> String[] tags;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DataExample</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">double</span> score)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.score = score;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.score;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String[] getTags() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.tags;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTags</span><span class="params">(String[] tags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.tags = tags;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"DataExample("</span> + <span class="keyword">this</span>.getName() + <span class="string">", "</span> + <span class="keyword">this</span>.getAge() + <span class="string">", "</span> + <span class="keyword">this</span>.getScore() + <span class="string">", "</span> + Arrays.deepToString(<span class="keyword">this</span>.getTags()) + <span class="string">")"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">canEqual</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> other <span class="keyword">instanceof</span> DataExample;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">this</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> DataExample)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    DataExample other = (DataExample) o;</span><br><span class="line">    <span class="keyword">if</span> (!other.canEqual((Object)<span class="keyword">this</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.getName() == <span class="keyword">null</span> ? other.getName() != <span class="keyword">null</span> : !<span class="keyword">this</span>.getName().equals(other.getName())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.getAge() != other.getAge()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (Double.compare(<span class="keyword">this</span>.getScore(), other.getScore()) != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!Arrays.deepEquals(<span class="keyword">this</span>.getTags(), other.getTags())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> PRIME = <span class="number">59</span>;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> temp1 = Double.doubleToLongBits(<span class="keyword">this</span>.getScore());</span><br><span class="line">    result = (result*PRIME) + (<span class="keyword">this</span>.getName() == <span class="keyword">null</span> ? <span class="number">43</span> : <span class="keyword">this</span>.getName().hashCode());</span><br><span class="line">    result = (result*PRIME) + <span class="keyword">this</span>.getAge();</span><br><span class="line">    result = (result*PRIME) + (<span class="keyword">int</span>)(temp1 ^ (temp1 &gt;&gt;&gt; <span class="number">32</span>));</span><br><span class="line">    result = (result*PRIME) + Arrays.deepHashCode(<span class="keyword">this</span>.getTags());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T value;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Exercise</span><span class="params">(String name, T value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Exercise&lt;T&gt; <span class="title">of</span><span class="params">(String name, T value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Exercise&lt;T&gt;(name, value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Exercise(name="</span> + <span class="keyword">this</span>.getName() + <span class="string">", value="</span> + <span class="keyword">this</span>.getValue() + <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">canEqual</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> other <span class="keyword">instanceof</span> Exercise;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (o == <span class="keyword">this</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Exercise)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      Exercise&lt;?&gt; other = (Exercise&lt;?&gt;) o;</span><br><span class="line">      <span class="keyword">if</span> (!other.canEqual((Object)<span class="keyword">this</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.getName() == <span class="keyword">null</span> ? other.getValue() != <span class="keyword">null</span> : !<span class="keyword">this</span>.getName().equals(other.getName())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.getValue() == <span class="keyword">null</span> ? other.getValue() != <span class="keyword">null</span> : !<span class="keyword">this</span>.getValue().equals(other.getValue())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> PRIME = <span class="number">59</span>;</span><br><span class="line">      <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">      result = (result*PRIME) + (<span class="keyword">this</span>.getName() == <span class="keyword">null</span> ? <span class="number">43</span> : <span class="keyword">this</span>.getName().hashCode());</span><br><span class="line">      result = (result*PRIME) + (<span class="keyword">this</span>.getValue() == <span class="keyword">null</span> ? <span class="number">43</span> : <span class="keyword">this</span>.getValue().hashCode());</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2、-使用-Getter-lazy-true-注解"><a href="#3-2、-使用-Getter-lazy-true-注解" class="headerlink" title="3.2、 使用@Getter(lazy=true)注解"></a>3.2、 使用<code>@Getter(lazy=true)</code>注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetterLazyExample</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Getter</span>(lazy=<span class="keyword">true</span>) <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span>[] cached = expensive();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span>[] expensive() &#123;</span><br><span class="line">    <span class="keyword">double</span>[] result = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">1000000</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">      result[i] = Math.asin(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java对比：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetterLazyExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> java.util.concurrent.AtomicReference&lt;java.lang.Object&gt; cached = <span class="keyword">new</span> java.util.concurrent.AtomicReference&lt;java.lang.Object&gt;();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">double</span>[] getCached() &#123;</span><br><span class="line">    java.lang.Object value = <span class="keyword">this</span>.cached.get();</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span>(<span class="keyword">this</span>.cached) &#123;</span><br><span class="line">        value = <span class="keyword">this</span>.cached.get();</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">final</span> <span class="keyword">double</span>[] actualValue = expensive();</span><br><span class="line">          value = actualValue == <span class="keyword">null</span> ? <span class="keyword">this</span>.cached : actualValue;</span><br><span class="line">          <span class="keyword">this</span>.cached.set(value);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>[])(value == <span class="keyword">this</span>.cached ? <span class="keyword">null</span> : value);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span>[] expensive() &#123;</span><br><span class="line">    <span class="keyword">double</span>[] result = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">1000000</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">      result[i] = Math.asin(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3、-使用-Builder注解"><a href="#3-3、-使用-Builder注解" class="headerlink" title="3.3、 使用@Builder注解"></a>3.3、 使用<code>@Builder</code>注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderExample</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Builder</span>.Default <span class="keyword">private</span> <span class="keyword">long</span> created = System.currentTimeMillis();</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="meta">@Singular</span> <span class="keyword">private</span> Set&lt;String&gt; occupations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java对比：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> created;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="keyword">private</span> Set&lt;String&gt; occupations;</span><br><span class="line">  </span><br><span class="line">  BuilderExample(String name, <span class="keyword">int</span> age, Set&lt;String&gt; occupations) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.occupations = occupations;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> $<span class="keyword">default</span>$created() &#123;</span><br><span class="line">    <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BuilderExampleBuilder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BuilderExampleBuilder();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderExampleBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> created;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> created$set;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> java.util.ArrayList&lt;String&gt; occupations;</span><br><span class="line">    </span><br><span class="line">    BuilderExampleBuilder() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> BuilderExampleBuilder <span class="title">created</span><span class="params">(<span class="keyword">long</span> created)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.created = created;</span><br><span class="line">      <span class="keyword">this</span>.created$set = <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> BuilderExampleBuilder <span class="title">name</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> BuilderExampleBuilder <span class="title">age</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> BuilderExampleBuilder <span class="title">occupation</span><span class="params">(String occupation)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.occupations == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.occupations = <span class="keyword">new</span> java.util.ArrayList&lt;String&gt;();</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">this</span>.occupations.add(occupation);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> BuilderExampleBuilder <span class="title">occupations</span><span class="params">(Collection&lt;? extends String&gt; occupations)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.occupations == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.occupations = <span class="keyword">new</span> java.util.ArrayList&lt;String&gt;();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.occupations.addAll(occupations);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> BuilderExampleBuilder <span class="title">clearOccupations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.occupations != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.occupations.clear();</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BuilderExample <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// complicated switch statement to produce a compact properly sized immutable set omitted.</span></span><br><span class="line">      Set&lt;String&gt; occupations = ...;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> BuilderExample(created$set ? created : BuilderExample.$<span class="keyword">default</span>$created(), name, age, occupations);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@java</span>.lang.Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"BuilderExample.BuilderExampleBuilder(created = "</span> + <span class="keyword">this</span>.created + <span class="string">", name = "</span> + <span class="keyword">this</span>.name + <span class="string">", age = "</span> + <span class="keyword">this</span>.age + <span class="string">", occupations = "</span> + <span class="keyword">this</span>.occupations + <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BuilderExample example = BuilderExample.builder().name(name).age(age).occupations.(occupations).build（）；</span><br></pre></td></tr></table></figure><h2 id="4、使用lombok遇到的问题"><a href="#4、使用lombok遇到的问题" class="headerlink" title="4、使用lombok遇到的问题"></a>4、使用lombok遇到的问题</h2><p>​    目前我发现无法对Lombok的注解进行注解结合，如下代码将报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.SOURCE)</span><br><span class="line">@Data  //Lombok注解</span><br><span class="line">public @interface MyPOJO&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    有知道原因的同学可以评论区交流一下。</p><h2 id="5、参考来源"><a href="#5、参考来源" class="headerlink" title="5、参考来源"></a>5、参考来源</h2><blockquote><p><a href="https://projectlombok.org&quot;Lombok官方文档" target="_blank" rel="noopener">Lombok官方文档</a></p><p><a href="https://cloud.tencent.com/developer/article/1419097&quot;LomBok@Builder注解&quot;" target="_blank" rel="noopener">Lombok@Builder注解</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0、Lombok是什么&quot;&gt;&lt;a href=&quot;#0、Lombok是什么&quot; class=&quot;headerlink&quot; title=&quot;0、Lombok是什么&quot;&gt;&lt;/a&gt;0、Lombok是什么&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Lombok&lt;/em&gt;&lt;/strong&gt;项目
      
    
    </summary>
    
      <category term="教程" scheme="http://tonyao.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Lombok" scheme="http://tonyao.top/tags/Lombok/"/>
    
      <category term="java" scheme="http://tonyao.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hexo系列（二）使用Markdown写hexo博文</title>
    <link href="http://tonyao.top/2019/08/09/hexo-Markdown-grammar/"/>
    <id>http://tonyao.top/2019/08/09/hexo-Markdown-grammar/</id>
    <published>2019-08-09T13:30:56.000Z</published>
    <updated>2019-08-09T14:41:32.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0、Markdown是什么"><a href="#0、Markdown是什么" class="headerlink" title="0、Markdown是什么"></a>0、Markdown是什么</h2><p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。也就是说当你熟练了之后就能不靠鼠标为博文设置行文格式，并且Markdown在许多博客得到支持，即<strong>“一次编写，到处展示”</strong>。</p><p>Markdown语法编辑器推荐使用<strong>Typora</strong>（即时展示效果，包括图片和流程图）、<strong>MarkdownPad2</strong>（分屏展示工作区和预览区）；</p><p>以下是Markdown常用的语法，更多细节可以看<a href="http://www.markdown.cn/&quot;Markdown官方文档&quot;" target="_blank" rel="noopener">Markdown官方文档</a>。</p><h2 id="1、标题"><a href="#1、标题" class="headerlink" title="1、标题"></a>1、标题</h2><pre><code># 一级标题 （请注意，末尾的#后面都有空格）## 二级标题### 三级标题#### 四级标题##### 五级标题</code></pre><p>效果如下：</p><p><img src="/img/hexo_2_1.png" alt="标题示例" title="标题示例图"></p><h2 id="2、字体样式"><a href="#2、字体样式" class="headerlink" title="2、字体样式"></a>2、字体样式</h2><pre><code>**加粗***倾斜****斜体加粗***~~删除线~~</code></pre><p>示例：</p><p><strong>加粗</strong></p><p><em>倾斜</em></p><p><strong><em>斜体加粗</em></strong></p><p><del>删除线</del></p><h2 id="3、引用"><a href="#3、引用" class="headerlink" title="3、引用"></a>3、引用</h2><pre><code>&gt;一级引用&gt;&gt;二级引用&gt;&gt;&gt;三级引用</code></pre><p>示例：</p><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p></blockquote></blockquote></blockquote><h2 id="4、分割线"><a href="#4、分割线" class="headerlink" title="4、分割线"></a>4、分割线</h2><pre><code>-------********</code></pre><p>示例：（效果都一样）</p><hr><hr><hr><hr><h2 id="5、图片"><a href="#5、图片" class="headerlink" title="5、图片"></a>5、图片</h2><pre><code>![图片文字]（图片地址 &quot;图片标题&quot;)</code></pre><p>图片标题是可选的，用双引号包括。</p><p>示例：</p><p><img src="http://www.tonyyao.top/img/avatar.jpg" alt="个人头像" title="图片标题"></p><h2 id="6、超链接"><a href="#6、超链接" class="headerlink" title="6、超链接"></a>6、超链接</h2><pre><code>[超链接名字]（超链接地址 &quot;超链接title&quot;)&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;</code></pre><p><a href="http://www.tonyyao.top" title="Tony个人博客" target="_blank" rel="noopener">Tony个人博客</a></p><p><a href="http://www.baidu.com" target="_blank">百度</a></p><h2 id="7、列表"><a href="#7、列表" class="headerlink" title="7、列表"></a>7、列表</h2><p><strong>同级无序列表：</strong></p><pre><code>- 无序列表+ 无序列表* 无序列表</code></pre><ul><li>无序列表</li></ul><ul><li>无序列表</li></ul><ul><li>无序列表</li></ul><p><strong>同级有序列表：</strong></p><pre><code>1. 有序列表2. 有序列表3. 有序列表</code></pre><ol><li>有序列表</li><li>有序列表</li><li>有序列表</li></ol><p><strong>多级无序列表：</strong></p><pre><code>- 一级无序列表   + 二级无序列表   - 二级无序列表   * 二级无序列表        + 三级无序列表- 一级无序列表   * 二级无序列表</code></pre><ul><li>一级无序列表<ul><li>二级无序列表</li></ul><ul><li>二级无序列表</li></ul><ul><li>二级无序列表<ul><li>三级无序列表</li></ul></li></ul></li><li>一级无序列表<ul><li>二级无序列表</li></ul></li></ul><p><strong>多级有序无序列表：</strong></p><pre><code>1. 一级有序列表   + 二级无序列表   - 二级无序列表   * 二级无序列表2. 一级有序列表   1. 二级有序列表   2. 二级有序列表   3. 三级有序列表</code></pre><ol><li>一级有序列表<ul><li>二级无序列表</li></ul><ul><li>二级无序列表</li></ul><ul><li>二级无序列表</li></ul></li><li>一级有序列表<ol><li>二级有序列表</li><li>二级有序列表</li><li>三级有序列表</li></ol></li></ol><h2 id="8、表格"><a href="#8、表格" class="headerlink" title="8、表格"></a>8、表格</h2><pre><code>表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略</code></pre><p>示例：</p><table><thead><tr><th>表头</th><th style="text-align:center">表头</th><th style="text-align:right">表头</th></tr></thead><tbody><tr><td>内容</td><td style="text-align:center">内容</td><td style="text-align:right">内容</td></tr><tr><td>内容</td><td style="text-align:center">内容</td><td style="text-align:right">内容</td></tr></tbody></table><h2 id="9、代码"><a href="#9、代码" class="headerlink" title="9、代码"></a>9、代码</h2><pre><code>`代码内容`    代码内容    代码内容（一个缩进，或者四个空格）</code></pre><p><img src="/img/hexo_2_2.png" alt="代码块" title="代码块"></p><p>示例：（第二种格式需要加括号防止转义，使用时去掉括号,这个符号是Esc键下面的键）</p><p><code>代码内容</code></p><pre><code>代码内容代码内容</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码内容</span><br><span class="line">代码内容</span><br></pre></td></tr></table></figure><h2 id="10、引用"><a href="#10、引用" class="headerlink" title="10、引用"></a>10、引用</h2><pre><code>&gt;引用文字</code></pre><p>示例：</p><blockquote><p>引用文字</p></blockquote><h2 id="11、流程图"><a href="#11、流程图" class="headerlink" title="11、流程图"></a>11、流程图</h2><pre><code>&lt;div id=&quot;flowchart-0&quot; class=&quot;flow-chart&quot;&gt;&lt;/div&gt;</code></pre><p>hexo默认不支持流程图，需要执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-filter-flowchart</span><br></pre></td></tr></table></figure><p>示例:</p><div id="flowchart-1" class="flow-chart"></div><p>以上就是Markdown常用语法，多熟悉语法才能体会到它的便捷。</p><h2 id="本文参考"><a href="#本文参考" class="headerlink" title="本文参考"></a>本文参考</h2><blockquote><p><a href="https://www.jianshu.com/p/191d1e21f7ed" title="Markdown基本语法" target="_blank" rel="noopener">Markdown基本语法</a></p><p><a href="http://www.markdown.cn" title="Markdown中文文档" target="_blank" rel="noopener">Markdown中文文档</a><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">    st=>start: Start    op=>operation: Your Operation    cond=>condition: Yes or No?    e=>end    st->op->cond    cond(yes)->e    cond(no)->op</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">st=>start: Startop=>operation: Your Operationcond=>condition: Yes or No?e=>endst->op->condcond(yes)->econd(no)->op</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0、Markdown是什么&quot;&gt;&lt;a href=&quot;#0、Markdown是什么&quot; class=&quot;headerlink&quot; title=&quot;0、Markdown是什么&quot;&gt;&lt;/a&gt;0、Markdown是什么&lt;/h2&gt;&lt;p&gt;Markdown是一种纯文本格式的标记语言。通过简单
      
    
    </summary>
    
      <category term="教程" scheme="http://tonyao.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo" scheme="http://tonyao.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>利用tesseract训练数据集来识别图片文本</title>
    <link href="http://tonyao.top/2018/04/02/tesseract/"/>
    <id>http://tonyao.top/2018/04/02/tesseract/</id>
    <published>2018-04-02T14:08:49.000Z</published>
    <updated>2019-08-08T17:32:53.547Z</updated>
    
    <content type="html"><![CDATA[<p>由于最近项目需要识别图片文字，我就去了解了Tesseract-OCR这个由Google维护的开源OCR引擎和其对应的Java接口Tess4j（Tesseract for java）。<br>缓更。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于最近项目需要识别图片文字，我就去了解了Tesseract-OCR这个由Google维护的开源OCR引擎和其对应的Java接口Tess4j（Tesseract for java）。&lt;br&gt;缓更。&lt;/p&gt;

      
    
    </summary>
    
      <category term="学习记录" scheme="http://tonyao.top/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="tesseract" scheme="http://tonyao.top/tags/tesseract/"/>
    
  </entry>
  
  <entry>
    <title>Hexo系列（一）搭建Hexo博客</title>
    <link href="http://tonyao.top/2018/04/02/hexo-1/"/>
    <id>http://tonyao.top/2018/04/02/hexo-1/</id>
    <published>2018-04-02T12:50:55.000Z</published>
    <updated>2019-08-08T17:32:53.543Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>附上官方中文文档：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a></p><h2 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h2><p>建立一个基于Hexo博客框架需要有以下环境（没有的话自行查看官方文档的安装教程）:</p><ul><li><p>Git</p></li><li><p>Node.js</p></li><li><p>GitHub帐号</p></li></ul><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>在你喜欢的目录文件夹下，右键后菜单中有个”Git Bash Here”选项，点击打开终端输入以下命令</p><pre><code>$ npm install -g hexo</code></pre><p>等安装后，输入</p><pre><code>$ hexo init</code></pre><p>安装依赖包：</p><pre><code>$ npm install</code></pre><p>现在可以输入hexo的常用命令来看看hexo初步模样</p><pre><code>$ hexo g //generate 生成静态文件的命令$ hexo s //server 启动并运行在本地服务器的命令</code></pre><p>然后访问<a href="localhost:4000" target="_blank" rel="noopener">localhost:4000</a>就成功看到Hexo了。<br>但现在这个博客只是在你的本地上运行，要想部署在网络上需要用到GitHub。</p><h2 id="部署Hexo到Github上——配置文件"><a href="#部署Hexo到Github上——配置文件" class="headerlink" title="部署Hexo到Github上——配置文件"></a>部署Hexo到Github上——配置文件</h2><p>在Github中创建一个仓库（即项目）</p><p><img src="/img/hexo_1_1.png" alt="建立仓库"></p><p><strong>（注意：仓库名字必须是你的Github账户名字.github.io）</strong></p><p>然后用<a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">Notopad++</a>（一个很强大很强大很强大的文本编辑软件）打开hexo根目录下的_config.yml文件（最好先备份一个）<br>拉到文件最下面，找到deploy节点，配置你hexo博客部署的网站。</p><pre><code>deploy:  type: git  repo:      github: git@github.com:TonyLoveCoding/TonyLoveCoding.github.io.git,master</code></pre><p>请注意以下几点：</p><ul><li><p><strong>配置时把这段代码的TonyLoveCoding换成你自己的Github账号名称。</strong></p></li><li><p><strong>Hexo的配置文件中所有冒号后面必须紧跟着一个空格。</strong></p></li><li><p><strong>对于新版本的Hexo而言，配置文件中每行的缩进是区别节点等级的标识，不要随意输入tab符号。比如depoly前面的-号就代表它有两个子节点type和repo，repo又有子节点github等等。</strong><br><img src="/img/hexo_1_2.png" alt="配置"></p></li></ul><h2 id="部署Hexo到Github上——配置SSH"><a href="#部署Hexo到Github上——配置SSH" class="headerlink" title="部署Hexo到Github上——配置SSH"></a>部署Hexo到Github上——配置SSH</h2><p>GitBash输入指令：</p><pre><code>ls -al ~/.ssh</code></pre><p>如果你是Github老用户应该会存在SSH文件，如果没有就继续</p><pre><code>ssh-keygen -t rsa -C &quot;765534395@qq.com&quot;</code></pre><p>记得换成你Github的绑定邮箱，遇到输入时直接回车就行。然后以下命令：</p><pre><code>ssh-agent -sssh-add ~/.ssh/id_rsa</code></pre><p>如果出错，试试</p><pre><code>eval `ssh-agent -s`ssh-add</code></pre><p>成功了后，在C:/Users/你的用户名称/.ssh目录下就应该能看到id_rsa.pub了<br><img src="/img/hexo_1_3.png" alt="SSH"><br>用Notepad++打开并复制里面全部内容。到GitHub中Setting中进行如下操作：<br><img src="/img/hexo_1_4.png" alt="填写SSH"><br>这样就完成了配置SSH，接着测试一下SSH</p><pre><code>ssh -T git@github.com</code></pre><p>有输入的话就yes。现在让我们开始部署到GitHub上。先安装hexo-deployer-git模块</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>然后开始部署：</p><pre><code>hexo g //generate 生成静态文件hexo d //deploy 部署到配置文件中指定的地点</code></pre><p>现在就可以访问你的博客了，地址是：你的GitHub名称.github.io</p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><pre><code>hexo new &quot;test_new_artcle&quot;</code></pre><p>然后在\hexo\source_posts下就有了test_new_artcle.md文件了。<br>由于Hexo推荐Markdown来写文章，我们最好下载<a href="http://markdownpad.com/download.html" target="_blank" rel="noopener">Markdownpad</a>来方便编写文章。<br><img src="/img/hexo_1_5.png" alt="markdownpad"><br>左边是我们的markdown编写区，右边则是实时的效果展示区。<br>关于markdown的语法我以后有空再写篇文章介绍下。<br>编写你的文章后，还是老命令：</p><pre><code>hexo g     //编译生成文件hexo s    //本地预览hexo d    //同步文件到Github</code></pre><p>就这样，你已经能完成在你的博客上写文章让其他人来观看了。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如果你看腻了Hexo的默认主题，可以去<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方的主题网页</a>中寻找你喜欢的主题，然后学习如何改进UI和样式效果，就能打造真正意义上的独立博客了。</p><p>当然，hexo并不止这些内容，记得多去官方文档看看，有很多特性等你去发掘。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
&lt;p&gt;附上官方中文文档：&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_
      
    
    </summary>
    
      <category term="教程" scheme="http://tonyao.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="http://tonyao.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>关于本站</title>
    <link href="http://tonyao.top/2018/04/02/blog-desciption/"/>
    <id>http://tonyao.top/2018/04/02/blog-desciption/</id>
    <published>2018-04-02T12:22:56.000Z</published>
    <updated>2019-08-08T17:32:53.537Z</updated>
    
    <content type="html"><![CDATA[<p>这个博客是用来记录我在学习过程中的经验收获和错误总结，为了方便自己以后查询也方便其他访客学习交流。尽量做到每周一两更吧。</p><hr><h1 id="建立博客的初衷"><a href="#建立博客的初衷" class="headerlink" title="建立博客的初衷"></a>建立博客的初衷</h1><p>以后学习的时候一直没有总结的习惯，也曾想过用CSDN、博客园等等来写博文，但感觉广告太多加上个人太懒的原因便不了了之，所以一直以来的资料都是直接收藏在浏览器中。<br>一个偶然的机会看到<a href="http://tengj.top/" target="_blank" rel="noopener">嘟嘟独立博客</a>后就萌发着手建立Hexo博客的想法，便开始搭建本博客，很感谢这位博主的教程。</p><hr><h1 id="博客进展"><a href="#博客进展" class="headerlink" title="博客进展"></a>博客进展</h1><pre><code>1）（已完成）Hexo搭建2）（已完成）使用并优化Jacman主题3）（进行中）让博客录入到百度和谷歌搜索引擎4）（已完成）利用swiftype添加博客站内引擎5）（已完成）加入访客统计工具CSZZ6）（已完成）实现国内部署在Coding, 国外部署在GitHub7）（已完成）为博客弄一个简单明了的域名（tonyao = Tony Yao）8) （进行中）添加第三方插件作为博客的评论系统（畅言或Gitalk）9) 其他……</code></pre><hr><h1 id="博客展望"><a href="#博客展望" class="headerlink" title="博客展望"></a>博客展望</h1><p>暂时没什么想法，尽量保证博文的质量吧，有空倒腾一下公众号什么的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个博客是用来记录我在学习过程中的经验收获和错误总结，为了方便自己以后查询也方便其他访客学习交流。尽量做到每周一两更吧。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;建立博客的初衷&quot;&gt;&lt;a href=&quot;#建立博客的初衷&quot; class=&quot;headerlink&quot; title=&quot;建立博客的
      
    
    </summary>
    
      <category term="随笔" scheme="http://tonyao.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="blog" scheme="http://tonyao.top/tags/blog/"/>
    
  </entry>
  
</feed>
